def mainText = file('jkind/src/jkind/Main.java').text
def match = mainText =~ /VERSION = "(.*)";/
def jkind_version = match[0][1]
assert jkind_version ==~ /[0-9.]+/

allprojects {
    apply plugin: 'java'

    repositories {
       flatDir {
           dirs '../jkind-common/dependencies'
       }
    }

    dependencies {
        compile name: 'antlr-runtime-4.4'
        compile name: 'jxl'
    }

    sourceSets {
        main {
            java {
                srcDirs = ['../jkind-common/src']
            }
        }
    }
}

project(':jkind') {
    repositories {
       flatDir {
           dirs 'dependencies'
       }
    }

    dependencies {
        compile name: 'commons-cli-1.2'
        compile name: 'smtinterpol'
    }

    sourceSets {
        main {
            java {
                srcDirs += ['src']
            }
            resources {
                srcDirs += ['resources']
            }
        }
    }

    jar {
        manifest {
            attributes 'Main-Class': 'jkind.Main',
                'Bundle-Description': 'An infinite-state model checker for safety properties in Lustre',
                'Bundle-License': 'https://github.com/loonwerks/jkind/blob/master/LICENSE',
                'Bundle-SymbolicName': 'com.collins.trustedsystems.jkind',
                'Bundle-Version': jkind_version
        }
        from sourceSets.main.allSource
    
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}

task dist(type: Zip) {
    dependsOn 'jkind:jar'
    from ('scripts') {
        include '*'
        exclude '*.bat'
        fileMode 0755
        into 'jkind'
    }
    from ('scripts') {
        include '*.bat'
        into 'jkind'
    }
    from ('jkind/build/libs') {
         include 'jkind.jar'
         into 'jkind'
    }
    baseName = 'jkind'
    version = jkind_version
}
 
artifacts {
    archives dist
}
